{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6f379329-f6e8-43e4-b938-853d0f759481",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'tensorflow'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 5\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01murllib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mrequest\u001b[39;00m\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[1;32m----> 5\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mtf\u001b[39;00m\n\u001b[0;32m      6\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpreprocessing\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mimage\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m ImageDataGenerator\n\u001b[0;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mplt\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'tensorflow'"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import tarfile\n",
    "import urllib.request\n",
    "import pandas as pd\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Step 1: Download the Food-101 dataset\n",
    "url = 'http://data.vision.ee.ethz.ch/cvl/food-101.tar.gz'\n",
    "dataset_path = 'food-101.tar.gz'\n",
    "extracted_path = 'food-101'\n",
    "\n",
    "if not os.path.exists(dataset_path):\n",
    "    print(\"Downloading the dataset...\")\n",
    "    urllib.request.urlretrieve(url, dataset_path)\n",
    "\n",
    "# Step 2: Extract the dataset\n",
    "if not os.path.exists(extracted_path):\n",
    "    print(\"Extracting the dataset...\")\n",
    "    with tarfile.open(dataset_path, 'r:gz') as tar:\n",
    "        tar.extractall()\n",
    "\n",
    "# Step 3: Data Preprocessing\n",
    "base_dir = extracted_path\n",
    "train_dir = os.path.join(base_dir, 'images')\n",
    "meta_dir = os.path.join(base_dir, 'meta')\n",
    "\n",
    "# Read class names\n",
    "with open(os.path.join(meta_dir, 'classes.txt'), 'r') as f:\n",
    "    class_names = f.read().splitlines()\n",
    "\n",
    "# Load train and test splits\n",
    "with open(os.path.join(meta_dir, 'train.txt'), 'r') as f:\n",
    "    train_files = [line.strip() + '.jpg' for line in f]\n",
    "with open(os.path.join(meta_dir, 'test.txt'), 'r') as f:\n",
    "    test_files = [line.strip() + '.jpg' for line in f]\n",
    "\n",
    "# Create a mapping from file names to class names\n",
    "def get_class(file_path):\n",
    "    return file_path.split('/')[0]\n",
    "\n",
    "# Create ImageDataGenerators\n",
    "train_datagen = ImageDataGenerator(rescale=1./255,\n",
    "                                   rotation_range=40,\n",
    "                                   width_shift_range=0.2,\n",
    "                                   height_shift_range=0.2,\n",
    "                                   shear_range=0.2,\n",
    "                                   zoom_range=0.2,\n",
    "                                   horizontal_flip=True,\n",
    "                                   fill_mode='nearest')\n",
    "\n",
    "test_datagen = ImageDataGenerator(rescale=1./255)\n",
    "\n",
    "# Create generators\n",
    "train_generator = train_datagen.flow_from_dataframe(\n",
    "    dataframe=pd.DataFrame({'filename': train_files}),\n",
    "    directory=train_dir,\n",
    "    x_col='filename',\n",
    "    y_col='filename',\n",
    "    target_size=(150, 150),\n",
    "    batch_size=32,\n",
    "    class_mode='categorical',\n",
    "    classes=class_names\n",
    ")\n",
    "\n",
    "validation_generator = test_datagen.flow_from_dataframe(\n",
    "    dataframe=pd.DataFrame({'filename': test_files}),\n",
    "    directory=train_dir,\n",
    "    x_col='filename',\n",
    "    y_col='filename',\n",
    "    target_size=(150, 150),\n",
    "    batch_size=32,\n",
    "    class_mode='categorical',\n",
    "    classes=class_names\n",
    ")\n",
    "\n",
    "# Step 4: Model Architecture\n",
    "base_model = tf.keras.applications.MobileNetV2(input_shape=(150, 150, 3), include_top=False, weights='imagenet')\n",
    "base_model.trainable = False\n",
    "\n",
    "model = tf.keras.Sequential([\n",
    "    base_model,\n",
    "    tf.keras.layers.GlobalAveragePooling2D(),\n",
    "    tf.keras.layers.Dense(512, activation='relu'),\n",
    "    tf.keras.layers.Dense(len(class_names), activation='softmax')\n",
    "])\n",
    "\n",
    "# Compile model\n",
    "model.compile(optimizer=tf.keras.optimizers.Adam(),\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "# Step 5: Model Training\n",
    "history = model.fit(train_generator,\n",
    "                    epochs=10,\n",
    "                    validation_data=validation_generator)\n",
    "\n",
    "# Step 6: Model Evaluation\n",
    "loss, accuracy = model.evaluate(validation_generator)\n",
    "print(f'Validation Accuracy: {accuracy}')\n",
    "\n",
    "# Step 7: Visualization\n",
    "def plot_images(images, labels, preds):\n",
    "    plt.figure(figsize=(10, 10))\n",
    "    for i in range(len(images)):\n",
    "        plt.subplot(3, 3, i + 1)\n",
    "        plt.imshow(images[i])\n",
    "        plt.title(f'True: {labels[i]}, Pred: {preds[i]}')\n",
    "        plt.axis('off')\n",
    "    plt.show()\n",
    "\n",
    "images, labels = next(validation_generator)\n",
    "preds = model.predict(images)\n",
    "pred_labels = np.argmax(preds, axis=1)\n",
    "true_labels = np.argmax(labels, axis=1)\n",
    "\n",
    "plot_images(images, true_labels, pred_labels)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a301271-9bb8-425c-b129-984df5b99bcf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
